function evaluateDataPointsModel(e){if(!(sensorReadingsList.length<4)){for(var s=sensorReadingsList[sensorReadingsList.length-1],i=0,n=0;n<sensorTimesList.length;n++)if(e-sensorTimesList[n]<segmentSize){i=n;break}if(0!=i){var t=computeOffsets(i,s),a=t.slice(0,i),r=Math.min.apply(null,a),o=t.slice(i,sensorReadingsList.length),l=Math.max.apply(null,o);r<30&&l>130&&(lastFire=e,pressed="pressed")}}}function computeOffsets(e,s){for(var i=new Array,n=0;n<sensorReadingsList.length;n++){var t=sensorReadingsList[n],a=[t[0]-s[0],t[1]-s[1],t[2]-s[2]],r=Math.sqrt(a[0]*a[0]+a[1]*a[1]+a[2]*a[2]);i.push(r)}return i}function evaluateReadingTimes(e){for(;sensorTimesList[0]<e-windowSize;)sensorTimesList.shift(),sensorReadingsList.shift();e-lastFire<segmentSize||evaluateDataPointsModel(e)}var lastFire=0,sensorReadingsList=new Array,sensorTimesList=new Array,segmentSize=200,windowSize=2*segmentSize,pressed="not-pressed",clicked="not-clicked";AFRAME.registerComponent("move-on-click",{init:function(){this.el.addEventListener("raycaster-intersected",function(){"pressed"==pressed&&("not-clicked"==clicked?(this.el.emit("clicked",null,!1),clicked="clicked"):(this.el.emit("clicked-off",null,!1),clicked="not-clicked"),pressed="not-pressed")}.bind(this)),this.magn=new Magnetometer({frequency:40});this.magn.onreading=function(){if("false"!=this.intersection){var e=[this.magn.x,this.magn.y,this.magn.z];sensorReadingsList.push(e);var s=this.magn.timestamp;sensorTimesList.push(s),evaluateReadingTimes(s)}}.bind(this),this.magn.start()}});